**선택자 (Selector) { 
    속성 : 속성값;
}

- 기본 선택자 (Basic Selectors)

1. 전체 선택자 (Universal Selector) = *
2. 태그 선택자 (Type Selector) = tag name으로 사용 EX) div, a, li...
3. 클래스 선택자 (Class Selector) = .class 이런식으로 클래스 이름 앞에 .사용
4. 아이디 선택자 (ID Selector) = #id 이런식으로 아이디 이름 앞에 #사용


-복합 선택자 (Combinators)

1. 일치 선택자(Basic Combinator)
    EX) span.orange => span tag이면서 orange라는 class를 가지고 있는 것을 선택
2. 자식 선택자(child Combinator)
    EX) ul > .orange => ul tag안에 orange라는 class를 가지고 있는 것을 선택
3. 후손(하위) 선택자(Descendant Combinator)
    띄어쓰기가 선택자의 기호
    EX) div .orange => div의 후손인 orange라는 class를 가지고 있는 것을 선택
4. 인접 형제 선택자(Adjacent Sibling Combinator)
    EX) .orange + li => li tag중에 인접해있는 다음 class인 .orange라는 class를 가지고 있는 것을 선택
5. 일반 형제 선택자(General Sibling Combinator)
    EX) .orange ~ li => li tag중에 .orange class를 가지고있는 li tag 다음 li tag를 모두 선택


-가상 클래스 선택자(Pseudo-Classes Selectors)

1. HOVER - 마우스가 올라가있는 동안에만 선택
    E:hover
2. ACTIVE - 마우스로 클릭하는 동안에만 선택
    E:active
3. FOCUS - 포커스 된 동안에만 선택 (보통 input에서 많이 사용)
    E:focus
4. FIRST CHILD - 형제 요소 중 첫번째 요소라면 선택
    E:first-child
5. LAST CHILD - 형제 요소 중 마지막 요소라면 선택
    E:last-child
6. NTH CHILD - 형제 요소 중 n번째 요소라면 선택
    E:nth-child(n)
    odd -> 모든 짝수 요소들 선택 가능 / even -> 모든 홀수 요소 선택 가능
    
    ##조상 요소 안의 태그가 다른 여러 후손을 선택할때 XXX-child앞에 선택자 이름을 지울수 있다.
        html) <div class="orange">
                <div>1</div> //선택
                <div>2</div>
                <div>
                    <p>3-1</p> //선택
                    <div>3-2</div>
                </div>
              </div>
        css) .orange :first-child
6. NTH OF TYPE - 타입(태그이름)과 동일한 타입인 형제 요소 중 E가 n번째 요소라면 선택
    E:nth-of-type(n) type은 tag이름을 의미 .class혹은 #id는 앞에 붙을수 없음
7. 부정 선택자(Negation Selector) - S가 아닌 E 선택
    E:not(S)


-가상 요소 선택자(Pseudo-Elements Selectors)

1. BEFORE - 요소 내부 앞에, 내용(content)을 삽입
    E::before
2. AFTER - 요소 내부 뒤에, 내용(content)을 삽입
    E::after


-속성 선택자(Attribute Selectors)

1. ATTR - 속성 attr을 포함한 요소 선택
    [attr]
    html) <input type="text" value="disabled text" disabled>
    css) [disabled] { color : red; }
2. ATTR = VALUE - 속성 attr을 포함하며 속성 값이 value인 요소 선택
    [attr=value]
    html) <ipnut type="password" value="1234">
    css) [type="password"] { color : red;} 대괄호 안에 큰따옴표는 생략 가능
3. ATTR^=VALUE - 속성 attr을 포함하며 속성 값이 value로 시작하는 요소 선택
    [attr^=value]
    html) <button class="btn-success">Success</button>
          <button class="btn-danger">danger</button>
    css) [class^="btn-"] { color : red; } - btn-으로 시작하는 요소 선택
4. ATTR$=VALUE - 속성 attr을 포함하며 속성 값이 value로 끝나는 요소 선택
    [attr$=value]
    html) <button class="btn-success">Success</button>
          <button class="btn-danger">danger</button>
    css) [clas$^="success"] { color : red; } - success로 끝나는 요소 선택
         [clas$^="danger"] { color : blue; } - danger로 끝나는 요소 선택


-상속(Inheritance)

상속되는 속성들(properties) - 글자를 다루는 속성들이 상속됨
    font(size-weight-style-line height-family)
    color
    text-align
    etc...

강제 상속 - inherit;


-우선순위
명시도, 선언 순서, 중요도 에 따라서 순위 결정

1.가장 중요(!important) - 모든 선언을 무시하고 가장 우선
2.인라인 선언 방식(Style Attribute) - 인라인 선언
3.아이디(ID Selector) - 아이디 선택자
4.클래스(Class Selector) - 클래스 선택자
5.태그(Tag Selector)
6.전체(Universal Selector)
7.상속(CSS Inheritance)




**단위
px - 픽셀 단위 사이즈
% - 부모요소의 영향을 받아서 단위를 완성 50%라고하면 부모요소의 사이즈에 50%
em - 자기 자신의 폰트사이즈에 영향을 받음 nem 하면 영향을 받은 font size에 n을 곱함
rem - html tag의 font size영향을 받음
vw - viewport의 가로 사이즈 기본적으로 백분율 EX)50vw 뷰포트의 절반
vh - viewport의 세로 사이즈 기본적으로 백분율 EX)50vh 뷰포트의 절반
vmin, vmax - max는 가로와 세로중 더 넓은 쪽의 백분율을 적용/ min은 더 좁은쪽의 백분율 적용
    50vmin


**박스 모델