**선택자 (Selector) { 
    속성 : 속성값;
}

- 기본 선택자 (Basic Selectors)

1. 전체 선택자 (Universal Selector) = *
2. 태그 선택자 (Type Selector) = tag name으로 사용 EX) div, a, li...
3. 클래스 선택자 (Class Selector) = .class 이런식으로 클래스 이름 앞에 .사용
4. 아이디 선택자 (ID Selector) = #id 이런식으로 아이디 이름 앞에 #사용


-복합 선택자 (Combinators)

1. 일치 선택자(Basic Combinator)
    EX) span.orange => span tag이면서 orange라는 class를 가지고 있는 것을 선택
2. 자식 선택자(child Combinator)
    EX) ul > .orange => ul tag안에 orange라는 class를 가지고 있는 것을 선택
3. 후손(하위) 선택자(Descendant Combinator)
    띄어쓰기가 선택자의 기호
    EX) div .orange => div의 후손인 orange라는 class를 가지고 있는 것을 선택
4. 인접 형제 선택자(Adjacent Sibling Combinator)
    EX) .orange + li => li tag중에 인접해있는 다음 class인 .orange라는 class를 가지고 있는 것을 선택
5. 일반 형제 선택자(General Sibling Combinator)
    EX) .orange ~ li => li tag중에 .orange class를 가지고있는 li tag 다음 li tag를 모두 선택


-가상 클래스 선택자(Pseudo-Classes Selectors)

1. HOVER - 마우스가 올라가있는 동안에만 선택
    E:hover
2. ACTIVE - 마우스로 클릭하는 동안에만 선택
    E:active
3. FOCUS - 포커스 된 동안에만 선택 (보통 input에서 많이 사용)
    E:focus
4. FIRST CHILD - 형제 요소 중 첫번째 요소라면 선택
    E:first-child
5. LAST CHILD - 형제 요소 중 마지막 요소라면 선택
    E:last-child
6. NTH CHILD - 형제 요소 중 n번째 요소라면 선택
    E:nth-child(n)
    odd -> 모든 짝수 요소들 선택 가능 / even -> 모든 홀수 요소 선택 가능
    
    ##조상 요소 안의 태그가 다른 여러 후손을 선택할때 XXX-child앞에 선택자 이름을 지울수 있다.
        html) <div class="orange">
                <div>1</div> //선택
                <div>2</div>
                <div>
                    <p>3-1</p> //선택
                    <div>3-2</div>
                </div>
              </div>
        css) .orange :first-child
6. NTH OF TYPE - 타입(태그이름)과 동일한 타입인 형제 요소 중 E가 n번째 요소라면 선택
    E:nth-of-type(n) type은 tag이름을 의미 .class혹은 #id는 앞에 붙을수 없음
7. 부정 선택자(Negation Selector) - S가 아닌 E 선택
    E:not(S)


-가상 요소 선택자(Pseudo-Elements Selectors)

1. BEFORE - 요소 내부 앞에, 내용(content)을 삽입
    E::before
2. AFTER - 요소 내부 뒤에, 내용(content)을 삽입
    E::after


-속성 선택자(Attribute Selectors)

1. ATTR - 속성 attr을 포함한 요소 선택
    [attr]
    html) <input type="text" value="disabled text" disabled>
    css) [disabled] { color : red; }
2. ATTR = VALUE - 속성 attr을 포함하며 속성 값이 value인 요소 선택
    [attr=value]
    html) <ipnut type="password" value="1234">
    css) [type="password"] { color : red;} 대괄호 안에 큰따옴표는 생략 가능
3. ATTR^=VALUE - 속성 attr을 포함하며 속성 값이 value로 시작하는 요소 선택
    [attr^=value]
    html) <button class="btn-success">Success</button>
          <button class="btn-danger">danger</button>
    css) [class^="btn-"] { color : red; } - btn-으로 시작하는 요소 선택
4. ATTR$=VALUE - 속성 attr을 포함하며 속성 값이 value로 끝나는 요소 선택
    [attr$=value]
    html) <button class="btn-success">Success</button>
          <button class="btn-danger">danger</button>
    css) [clas$^="success"] { color : red; } - success로 끝나는 요소 선택
         [clas$^="danger"] { color : blue; } - danger로 끝나는 요소 선택


-상속(Inheritance)

상속되는 속성들(properties) - 글자를 다루는 속성들이 상속됨
    font(size-weight-style-line height-family)
    color
    text-align
    etc...

강제 상속 - inherit;


-우선순위
명시도, 선언 순서, 중요도 에 따라서 순위 결정

1.가장 중요(!important) - 모든 선언을 무시하고 가장 우선
2.인라인 선언 방식(Style Attribute) - 인라인 선언
3.아이디(ID Selector) - 아이디 선택자
4.클래스(Class Selector) - 클래스 선택자
5.태그(Tag Selector)
6.전체(Universal Selector)
7.상속(CSS Inheritance)




**단위
px - 픽셀 단위 사이즈
% - 부모요소의 영향을 받아서 단위를 완성 50%라고하면 부모요소의 사이즈에 50%
em - 자기 자신의 폰트사이즈에 영향을 받음 nem 하면 영향을 받은 font size에 n을 곱함
rem - html tag의 font size영향을 받음
vw - viewport의 가로 사이즈 기본적으로 백분율 EX)50vw 뷰포트의 절반
vh - viewport의 세로 사이즈 기본적으로 백분율 EX)50vh 뷰포트의 절반
vmin, vmax - max는 가로와 세로중 더 넓은 쪽의 백분율을 적용/ min은 더 좁은쪽의 백분율 적용
    50vmin


**박스 모델

-속성값
1. width, height
    auto - 브라우저가 너비를 계산 - 기본값 : auto
    단위 - px, em, cm등 단위로 지정
2. max-width, min-width, max-height, min-height
    단위 - px,em,%등 단위로 지정 - 기본값(max/min) : none/0
    auto - 브라우저가 너비(높이)를 계산
3. margin - 요소의 '외부(바깥)여백'을 지정 [단축속성], 음수값 사용가능 - Negative margin
    단위 - px, em, cm 등 단위로 지정 - 기본값 : 0
    auto - 브라우저가 너비를 계산
    % - 부모요소의 너비에 대한 비율로 지정
    단축속성 : 상 우 하 좌(=[상 우 하 좌];); 상 [좌,우] 하; [상,하] [좌,우]; 상부터 시계방향으로 진행
    마진 중복 : 여백이 겹쳐짐
        마진 중복 계산법
            양수 중복 - 큰 값
            음수 중복 - 작은 값
            양수 + 음수 중복 - 더한 값
4. padding - 요소 '내부(안)여백'을 지정 [단축속성]
    단위 - px, em, cm등 단위로 지정 - 기본값 : 0
    % - 부모 요소의 너비에 대한 비율로 지정
    단축속성 : margin과 같음
    크기 증가 - 내부 여백만큼 요소의 크기가 커짐
        box-sizing: border-box 추가시 보이는대로 만들어짐(자동계산)
5. border - 요소의 '테두리 선'을 지정
    -width - 선의 두께(너비) - 기본값 : medium
    -style - 선의 종류 - 기본값 : none
    -color - 선의 색상 - 기본값 : black
    단축 속성 : 두께 종류 색상;
    -width 속성 값
        medium - 중간 두께 - 기본값 medium
        thin - 얇은 두께
        thinck - 두꺼운 두께
        단위 - px, em, cm등 단위로 지정
    -style 속성 값
        none 선 없음 기본값
        hidden 선 없음과 동일 (table요소에서 사용)
        solid 실선
        dotted 점선
        dashed 파선
        double 두줄선
        groove 홈이 파여있는 모양 선
        ridge 솟은 모양 선(그groove와 반대)
        inset 요소 전체가 들어간 모양 선
        outset 요소 전체가 나온 모양 선
    -color 속성 값
        색상 - 선의 색상을 지정 - 기본값 : black
        transparent - 투명한 선(요소의 배경색이 보임)
6. box-sizing - 요소의 크기 계산 기준을 지정
    content-box - 너비(width, height)만으로 요소의 크기를 계산 - 기본값 : content-box
    border-box - 너비(widht, height)에 안쪽 여백(padding)과 테두리선(border) 을 포함하여 요소의 크기를 계산
7. display - 요소의 박스 타입을 설정
    block - 블록 요소 div
    inline - 인라인 요소 span
    inline - block 인라인-블럭요소 input
    기타 - tablem table-cell flex등
    none - 요소의 박스 타입이 없음(요소가 사라짐)
8.overflow - 요소 크기 이상으로 내용(자식요소)이 넘쳤을 때, 내용의 보여짐을 제어 [단축속성]
    visible - 넘친부분을 자르지 않고 그대로 보여줌 - 기본값 : visible
    hidden - 넘친 부분을 잘라내고, 보이지 않도록 함
    scroll - 넘친 부분을 잘라내고, 스크롤 바를 이용하여 볼 수 있도록 함
    auto - 넘친 부분이 있는 경우만 잘라내고, 스크롤 바를 이용하여 볼 수 있도록 함
9.opacity - 요소의 투명도 지정
    숫자 - 0부터 1사이의 소숫점 숫자 지정 - 기본값 : 1